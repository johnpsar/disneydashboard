{"ast":null,"code":"import _asyncToGenerator from \"/home/johnpsar/Desktop/disneydashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { lastValueFrom } from 'rxjs';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CharacterService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'https://api.disneyapi.dev/characters';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  //getCharacters Returns 50 first characters sorted by name\n  getCharacters(page) {\n    let params = new HttpParams().set('page', page.toString());\n    return this.http.get(`${this.url}`, {\n      params\n    }).pipe(map(response => response));\n  }\n  getPaginatedCharacters(page, limit) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let characters = [];\n      if (limit <= 50) {\n        let temp = _this.getCharacters(Math.ceil(limit * page / 50));\n        let temp2 = yield lastValueFrom(temp);\n        characters = temp2.data;\n        //special case limit 20 kai page 3 pou thelo teleftaia 10 protou page kai prota 10 deuterou page\n        if ((page * limit - limit) % 50 + limit > 50) {\n          let temp = _this.getCharacters(Math.ceil(limit / 50) + 1);\n          let temp2 = yield lastValueFrom(temp);\n          characters = characters.concat(temp2.data);\n        }\n        characters = characters.slice((page * limit - limit) % 50, (page * limit - limit) % 50 + limit);\n      } else {\n        //50 is the # of results per page\n        for (let i = limit / 50 * page - limit / 50 + 1; i <= limit / 50 * page; i++) {\n          let temp = _this.getCharacters(i);\n          let temp2 = yield lastValueFrom(temp);\n          characters = characters.concat(temp2.data);\n        }\n      }\n      return characters;\n      // return this.http.get<Character[]>(this.url); //todo delete wrong\n    })();\n  }\n}\n\nCharacterService.ɵfac = function CharacterService_Factory(t) {\n  return new (t || CharacterService)(i0.ɵɵinject(i1.HttpClient));\n};\nCharacterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CharacterService,\n  factory: CharacterService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}